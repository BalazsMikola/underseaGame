// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StrategyGame.Dal;

namespace StrategyGame.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200320111348_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Grow_coral");

                    b.Property<int>("Grow_pop");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<int>("Space");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            Grow_coral = 200,
                            Grow_pop = 50,
                            Name = "áramlásirányító",
                            Price = 1000,
                            Space = 0
                        },
                        new
                        {
                            BuildingId = 2,
                            Grow_coral = 0,
                            Grow_pop = 0,
                            Name = "zátonyvár",
                            Price = 1000,
                            Space = 200
                        });
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coral");

                    b.Property<string>("Name");

                    b.Property<int>("Pearl");

                    b.Property<int>("Population");

                    b.Property<int>("Rank");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityArmy", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("EnemyId");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("CityArmy");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityBuilding", b =>
                {
                    b.Property<int>("CityId");

                    b.Property<int>("BuildingId");

                    b.Property<int>("Number");

                    b.Property<int>("RoundToFinish");

                    b.HasKey("CityId", "BuildingId");

                    b.HasIndex("BuildingId");

                    b.ToTable("CityBuilding");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityUnit", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Number");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("CityUnit");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityUpgrade", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("RoundToFinish");

                    b.HasKey("Id");

                    b.ToTable("CityUpgrade");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.Rounds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElapsedRounds");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attack");

                    b.Property<int>("Cost");

                    b.Property<int>("Defend");

                    b.Property<int>("Food");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 6,
                            Cost = 1,
                            Defend = 2,
                            Food = 1,
                            Name = "rohamfóka",
                            Price = 50
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Cost = 1,
                            Defend = 6,
                            Food = 1,
                            Name = "csatacsikó",
                            Price = 50
                        },
                        new
                        {
                            Id = 3,
                            Attack = 5,
                            Cost = 3,
                            Defend = 5,
                            Food = 2,
                            Name = "lézercápa",
                            Price = 100
                        });
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attack");

                    b.Property<int>("Coral");

                    b.Property<int>("Defend");

                    b.Property<string>("Name");

                    b.Property<int>("Tax");

                    b.HasKey("Id");

                    b.ToTable("Upgrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 0,
                            Coral = 10,
                            Defend = 0,
                            Name = "iszaptraktor",
                            Tax = 0
                        },
                        new
                        {
                            Id = 2,
                            Attack = 0,
                            Coral = 15,
                            Defend = 0,
                            Name = "iszapkombájn",
                            Tax = 0
                        },
                        new
                        {
                            Id = 3,
                            Attack = 0,
                            Coral = 0,
                            Defend = 20,
                            Name = "korallfal",
                            Tax = 0
                        },
                        new
                        {
                            Id = 4,
                            Attack = 20,
                            Coral = 0,
                            Defend = 0,
                            Name = "szonárágyú",
                            Tax = 0
                        },
                        new
                        {
                            Id = 5,
                            Attack = 10,
                            Coral = 0,
                            Defend = 10,
                            Name = "vízalatti harcművészetek",
                            Tax = 0
                        },
                        new
                        {
                            Id = 6,
                            Attack = 0,
                            Coral = 0,
                            Defend = 0,
                            Name = "alkímia",
                            Tax = 30
                        });
                });

            modelBuilder.Entity("StrategyGame.Model.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("User");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StrategyGame.Model.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StrategyGame.Model.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StrategyGame.Model.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityArmy", b =>
                {
                    b.HasOne("StrategyGame.Model.Entities.City", "City")
                        .WithMany("CityArmies")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Entities.Unit", "Unit")
                        .WithOne("Army")
                        .HasForeignKey("StrategyGame.Model.Entities.CityArmy", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityBuilding", b =>
                {
                    b.HasOne("StrategyGame.Model.Entities.Building", "Building")
                        .WithMany("CityBuildings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Entities.City", "City")
                        .WithMany("CityBuildings")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityUnit", b =>
                {
                    b.HasOne("StrategyGame.Model.Entities.City", "City")
                        .WithMany("CityUnits")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Entities.Unit")
                        .WithMany("CityUnits")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("StrategyGame.Model.Entities.CityUpgrade", b =>
                {
                    b.HasOne("StrategyGame.Model.Entities.City", "City")
                        .WithOne("Upgrade")
                        .HasForeignKey("StrategyGame.Model.Entities.CityUpgrade", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StrategyGame.Model.Entities.Upgrade", "Upgrade")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
